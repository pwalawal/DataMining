cell_data <-c('train','test')
dataset <- factor(cell_data)
return(dataset)
}
mykNN<-function(train,test)    #kNN classifier
{
modelkNN <- IBk(Continent~.,train,control = Weka_control(K = 20, X = TRUE))     #k is taken as 3. Can be taken as 4, 5, 6 etc.
return(modelkNN)
}
mykNNPredictor<-function(modelkNN)       #shows performance on test data...used for final table
{
kNNpred<-predict(modelkNN,test)
summary(kNNpred)
confusionMatrix(kNNpred,test$Continent)
}
mykNNPredictorTrain<-function(modelkNNTrain)    #shows performance on training data...used to show details of classification
{
kNNpred<-predict(modelkNN,train)
summary(kNNpred)
confusionMatrix(kNNpred,train$Continent)
}
divideDataset(read.csv("life_expectancy.csv"))     #calling divide datasets
modelkNN=mykNN(train =train,test =test )        #training kNN model
mykNNPredictor(modelkNN =modelkNN )             #Making prediction on testing data for final table
mykNNPredictorTrain(modelkNNTrain =  modelkNNTrain)       #Performance of kNN on Training data.Please remove comments from code to run
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("foreach", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("gdata", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("iterators", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("klaR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("oblique.tree", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("RWeka", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("ROCR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("scales", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
divideDataset<-function(data)
{
set.seed(5469)
data = read.csv("life_expectancy.csv")
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
#dataset<-list(train,test)
cell_data <-c('train','test')
dataset <- factor(cell_data)
return(dataset)
}
mykNN<-function(train,test)    #kNN classifier
{
modelkNN <- IBk(Continent~.,train,control = Weka_control(K = 20, X = TRUE))     #k is taken as 3. Can be taken as 4, 5, 6 etc.
return(modelkNN)
}
mykNNPredictor<-function(modelkNN)       #shows performance on test data...used for final table
{
kNNpred<-predict(modelkNN,test)
summary(kNNpred)
confusionMatrix(kNNpred,test$Continent)
}
mykNNPredictorTrain<-function(modelkNNTrain)    #shows performance on training data...used to show details of classification
{
kNNpred<-predict(modelkNN,train)
summary(kNNpred)
confusionMatrix(kNNpred,train$Continent)
}
divideDataset(read.csv("life_expectancy.csv"))     #calling divide datasets
modelkNN=mykNN(train =train,test =test )        #training kNN model
mykNNPredictor(modelkNN =modelkNN )             #Making prediction on testing data for final table
mykNNPredictorTrain(modelkNNTrain =  modelkNNTrain)       #Performance of kNN on Training data.Please remove comments from code to run
divideDataset<-function(data)
{
set.seed(5469)
data = read.csv("life_expectancy.csv")
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myNaiveBayes<-function(train)
{
model <- naiveBayes(train[,1:7], train[,8])
return(model)
}
myNaiveBayesPredictor<-function(model)  #shows performance on test data...used for final table
{
predictions <- predict(model, test[,1:7])
confusionMatrix(predictions, test$Continent)
}
myNaiveBayesPredictorTrain<-function(model)  #shows performance on training data...used to show details of classification
{
predictions <- predict(model, train[,1:7])
confusionMatrix(predictions, train$Continent)
}
divideDataset(read.csv("life_expectancy.csv"))     #calling divide datasets
model=myNaiveBayes(train =train )         #training naiveBayes model
myNaiveBayesPredictor(model = model)       #Making prediction on testing data for final table
myNaiveBayesPredictorTrain(model = model)  #Performance of naiveBayes on Training data
divideDataset<-function(data)
{
set.seed(5469)
data = read.csv("life_expectancy.csv")
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myC45<-function(train)
{
mode <- J48(Continent~., train)
return(mode)
}
myC45Predictor<-function(mode)     #shows performance on test data...used for final table
{
predictions <- predict(mode, test[,1:7])
confusionMatrix(predictions, test$Continent)
}
myC45Train<-function(mode)          #shows performance on training data...used to show details of classification
{
predictions <- predict(mode, train[,1:7])
confusionMatrix(predictions, train$Continent)
}
divideDataset(read.csv("life_expectancy.csv"))                #calling divide datasets
mode=myC45(train =train )         #training C45 model
myC45Predictor(mode = mode)       #Making prediction on testing data for final table
myC45Train(mode = mode)           #Performance of C45 on Training data.Code is commented,please remove comment to run it.
divideDataset<-function(data)
{
set.seed(5469)
data = read.csv("life_expectancy.csv")
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myRipper<-function(train)
{
modelJRip <- JRip(Continent~., train)
return(modelJRip)
}
myRipperPredictor<-function(modelJRip)        #shows performance on test data...used for final table
{
predictions <- predict(modelJRip, test[,1:7])
confusionMatrix(predictions, test$Continent)
}
myRipperTrain<-function(modelJRip)            #shows performance on training data...used to show details of classification
{
predictions <- predict(modelJRip, train[,1:7])
confusionMatrix(predictions, train$Continent)
}
divideDataset(read.csv("life_expectancy.csv"))               #calling divide datasets
modelJRip=myRipper(train =train )              #training Ripper model
myRipperPredictor(modelJRip = modelJRip)       #Making prediction on testing data for final table
myRipperTrain(modelJRip = modelJRip)           #Performance of Ripper on Training data.Code is commented,please remove comment to run it.
divideDataset<-function(data)
{
set.seed(5469)
data = read.csv("life_expectancy.csv")
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myRipper<-function(train)
{
modelJRip <- JRip(Continent~., train)
return(modelJRip)
}
myRipperPredictor<-function(modelJRip)        #shows performance on test data...used for final table
{
predictions <- predict(modelJRip, test[,1:7])
confusionMatrix(predictions, test$Continent)
}
myRipperTrain<-function(modelJRip)            #shows performance on training data...used to show details of classification
{
predictions <- predict(modelJRip, train[,1:7])
confusionMatrix(predictions, train$Continent)
}
divideDataset(read.csv("life_expectancy.csv"))               #calling divide datasets
modelJRip=myRipper(train =train )              #training Ripper model
myRipperPredictor(modelJRip = modelJRip)       #Making prediction on testing data for final table
myRipperTrain(modelJRip = modelJRip)           #Performance of Ripper on Training data.Code is commented,please remove comment to run it.
divideDataset<-function(data)
{
set.seed(5469)
data = read.csv("life_expectancy.csv")
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myC45<-function(train)
{
mode <- J48(Continent~., train)
return(mode)
}
myC45Predictor<-function(mode)     #shows performance on test data...used for final table
{
predictions <- predict(mode, test[,1:7])
confusionMatrix(predictions, test$Continent)
}
myC45Train<-function(mode)          #shows performance on training data...used to show details of classification
{
predictions <- predict(mode, train[,1:7])
confusionMatrix(predictions, train$Continent)
}
divideDataset(read.csv("life_expectancy.csv"))                #calling divide datasets
mode=myC45(train =train )         #training C45 model
myC45Predictor(mode = mode)       #Making prediction on testing data for final table
myC45Train(mode = mode)           #Performance of C45 on Training data.Code is commented,please remove comment to run it.
divideDataset<-function(data)
{
set.seed(5469)
data = read.csv("life_expectancy.csv")
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myNaiveBayes<-function(train)
{
model <- naiveBayes(train[,1:7], train[,8])
return(model)
}
myNaiveBayesPredictor<-function(model)  #shows performance on test data...used for final table
{
predictions <- predict(model, test[,1:7])
confusionMatrix(predictions, test$Continent)
}
myNaiveBayesPredictorTrain<-function(model)  #shows performance on training data...used to show details of classification
{
predictions <- predict(model, train[,1:7])
confusionMatrix(predictions, train$Continent)
}
divideDataset(read.csv("life_expectancy.csv"))     #calling divide datasets
model=myNaiveBayes(train =train )         #training naiveBayes model
myNaiveBayesPredictor(model = model)       #Making prediction on testing data for final table
myNaiveBayesPredictorTrain(model = model)  #Performance of naiveBayes on Training data
divideDataset<-function(data)
{
set.seed(5469)
data = read.csv("life_expectancy.csv")
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
#dataset<-list(train,test)
cell_data <-c('train','test')
dataset <- factor(cell_data)
return(dataset)
}
mykNN<-function(train,test)    #kNN classifier
{
modelkNN <- IBk(Continent~.,train,control = Weka_control(K = 20, X = TRUE))     #k is taken as 3. Can be taken as 4, 5, 6 etc.
return(modelkNN)
}
mykNNPredictor<-function(modelkNN)       #shows performance on test data...used for final table
{
kNNpred<-predict(modelkNN,test)
summary(kNNpred)
confusionMatrix(kNNpred,test$Continent)
}
mykNNPredictorTrain<-function(modelkNNTrain)    #shows performance on training data...used to show details of classification
{
kNNpred<-predict(modelkNN,train)
summary(kNNpred)
confusionMatrix(kNNpred,train$Continent)
}
divideDataset(read.csv("life_expectancy.csv"))     #calling divide datasets
modelkNN=mykNN(train =train,test =test )        #training kNN model
mykNNPredictor(modelkNN =modelkNN )             #Making prediction on testing data for final table
mykNNPredictorTrain(modelkNNTrain =  modelkNNTrain)       #Performance of kNN on Training data.Please remove comments from code to run
divideDataset<-function(data)
{
set.seed(5469)
data = read.csv("life_expectancy.csv")
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myNaiveBayes<-function(train)
{
model <- naiveBayes(train[,1:7], train[,8])
return(model)
}
myNaiveBayesPredictor<-function(model)  #shows performance on test data...used for final table
{
predictions <- predict(model, test[,1:7])
confusionMatrix(predictions, test$Continent)
}
myNaiveBayesPredictorTrain<-function(model)  #shows performance on training data...used to show details of classification
{
predictions <- predict(model, train[,1:7])
confusionMatrix(predictions, train$Continent)
}
divideDataset(read.csv("life_expectancy.csv"))     #calling divide datasets
model=myNaiveBayes(train =train )         #training naiveBayes model
myNaiveBayesPredictor(model = model)       #Making prediction on testing data for final table
myNaiveBayesPredictorTrain(model = model)  #Performance of naiveBayes on Training data
divideDataset<-function(data)
{
set.seed(5469)
data = read.csv("life_expectancy.csv")
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myNaiveBayes<-function(train)
{
model <- naiveBayes(train[,1:7], train[,8])
return(model)
}
myNaiveBayesPredictor<-function(model)  #shows performance on test data...used for final table
{
predictions <- predict(model, test[,1:7])
confusionMatrix(predictions, test$Continent)
}
myNaiveBayesPredictorTrain<-function(model)  #shows performance on training data...used to show details of classification
{
predictions <- predict(model, train[,1:7])
confusionMatrix(predictions, train$Continent)
}
divideDataset(read.csv("life_expectancy.csv"))     #calling divide datasets
model=myNaiveBayes(train =train )         #training naiveBayes model
myNaiveBayesPredictor(model = model)       #Making prediction on testing data for final table
myNaiveBayesPredictorTrain(model = model)  #Performance of naiveBayes on Training data
divideDataset<-function(data)
{
set.seed(5469)
data = read.csv("life_expectancy.csv")
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myRipper<-function(train)
{
modelJRip <- JRip(Continent~., train)
return(modelJRip)
}
myRipperPredictor<-function(modelJRip)        #shows performance on test data...used for final table
{
predictions <- predict(modelJRip, test[,1:7])
confusionMatrix(predictions, test$Continent)
}
myRipperTrain<-function(modelJRip)            #shows performance on training data...used to show details of classification
{
predictions <- predict(modelJRip, train[,1:7])
confusionMatrix(predictions, train$Continent)
}
divideDataset(read.csv("life_expectancy.csv"))               #calling divide datasets
modelJRip=myRipper(train =train )              #training Ripper model
myRipperPredictor(modelJRip = modelJRip)       #Making prediction on testing data for final table
myRipperTrain(modelJRip = modelJRip)           #Performance of Ripper on Training data.Code is commented,please remove comment to run it.
divideDataset<-function(data)
{
set.seed(5469)
data = read.csv("life_expectancy.csv")
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myC45<-function(train)
{
mode <- J48(Continent~., train)
return(mode)
}
myC45Predictor<-function(mode)     #shows performance on test data...used for final table
{
predictions <- predict(mode, test[,1:7])
confusionMatrix(predictions, test$Continent)
}
myC45Train<-function(mode)          #shows performance on training data...used to show details of classification
{
predictions <- predict(mode, train[,1:7])
confusionMatrix(predictions, train$Continent)
}
divideDataset(read.csv("life_expectancy.csv"))                #calling divide datasets
mode=myC45(train =train )         #training C45 model
myC45Predictor(mode = mode)       #Making prediction on testing data for final table
myC45Train(mode = mode)           #Performance of C45 on Training data.Code is commented,please remove comment to run it.
divideDataset<-function(data)
{
set.seed(5469)
data = read.csv("life_expectancy.csv")
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myNaiveBayes<-function(train)
{
model <- naiveBayes(train[,1:7], train[,8])
return(model)
}
myNaiveBayesPredictor<-function(model)  #shows performance on test data...used for final table
{
predictions <- predict(model, test[,1:7])
confusionMatrix(predictions, test$Continent)
}
myNaiveBayesPredictorTrain<-function(model)  #shows performance on training data...used to show details of classification
{
predictions <- predict(model, train[,1:7])
confusionMatrix(predictions, train$Continent)
}
divideDataset(read.csv("life_expectancy.csv"))     #calling divide datasets
model=myNaiveBayes(train =train )         #training naiveBayes model
myNaiveBayesPredictor(model = model)       #Making prediction on testing data for final table
myNaiveBayesPredictorTrain(model = model)  #Performance of naiveBayes on Training data
divideDataset<-function(data)
{
set.seed(5469)
data = read.csv("life_expectancy.csv")
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
#dataset<-list(train,test)
cell_data <-c('train','test')
dataset <- factor(cell_data)
return(dataset)
}
mykNN<-function(train,test)    #kNN classifier
{
modelkNN <- IBk(Continent~.,train,control = Weka_control(K = 20, X = TRUE))     #k is taken as 3. Can be taken as 4, 5, 6 etc.
return(modelkNN)
}
mykNNPredictor<-function(modelkNN)       #shows performance on test data...used for final table
{
kNNpred<-predict(modelkNN,test)
summary(kNNpred)
confusionMatrix(kNNpred,test$Continent)
}
mykNNPredictorTrain<-function(modelkNNTrain)    #shows performance on training data...used to show details of classification
{
kNNpred<-predict(modelkNN,train)
summary(kNNpred)
confusionMatrix(kNNpred,train$Continent)
}
divideDataset(read.csv("life_expectancy.csv"))     #calling divide datasets
modelkNN=mykNN(train =train,test =test )        #training kNN model
mykNNPredictor(modelkNN =modelkNN )             #Making prediction on testing data for final table
mykNNPredictorTrain(modelkNNTrain =  modelkNNTrain)       #Performance of kNN on Training data.Please remove comments from code to run
