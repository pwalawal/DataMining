myOblique<-function(train)
{
modelOblique <- oblique.tree(Species~., data = train ,oblique.splits =
"on")
summary(modelOblique)
textplot(modelOblique)
return(modelOblique)
}
myObliquePredictor<-function(modelOblique)
{
predictionsOblique <- predict(modelOblique, test)
summary(predictionsOblique)
#confusionMatrix(predictionsOblique,test[,5])
}
myObliqueTrain<-function(modelOblique)
{
predictions <- predict(modelOblique, train)
summary(predictions)
#confusionMatrix(predictions,train)
}
divideDataset(iris)      #calling divide datasets
modelOblique=myOblique(train =train) #training Oblique model
myObliquePredictor(modelOblique = modelOblique)       #Making prediction on testing data for final table
myObliqueTrain(modelOblique = modelOblique)           #Performance of Oblique on Training data.Code is commented,please remove comment to run it.
summary(modelOblique)
textplot(modelOblique)
table(modelOblique)
table(predictions)
summary(modelOblique)
textplot(modelOblique)
text(modelOblique)
text(modelOblique)
modelOblique.tree <- oblique.tree(Species~., data = train ,oblique.splits =
"on")
text(modelOblique.tree)
modelOblique <- oblique.tree(Species~., data = test ,oblique.splits =
"on")
summary(modelOblique)
textplot(modelOblique)
text(modelOblique)
text(modelOblique)
divideDataset<-function(data)
{
set.seed(5469)
data = iris
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myOblique<-function(train)
{
modelOblique <- oblique.tree(Species~., data = test ,oblique.splits =
"on")
summary(modelOblique)
textplot(modelOblique)
text(modelOblique)
return(modelOblique)
}
myObliquePredictor<-function(modelOblique)
{
predictionsOblique <- predict(modelOblique, test)
summary(predictionsOblique)
#confusionMatrix(predictionsOblique,test[,5])
}
myObliqueTrain<-function(modelOblique)
{
predictions <- predict(modelOblique, train)
summary(predictions)
#confusionMatrix(predictions,train)
}
divideDataset(iris)      #calling divide datasets
modelOblique=myOblique(train =train) #training Oblique model
myObliquePredictor(modelOblique = modelOblique)       #Making prediction on testing data for final table
myObliqueTrain(modelOblique = modelOblique)           #Performance of Oblique on Training data.Code is commented,please remove comment to run it.
divideDataset<-function(data)
{
set.seed(5469)
data = iris
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myOblique<-function(train)
{
modelOblique <- oblique.tree(Species~., data = train ,oblique.splits =
"on")
summary(modelOblique)
textplot(modelOblique)
text(modelOblique)
return(modelOblique)
}
myObliquePredictor<-function(modelOblique)
{
predictionsOblique <- predict(modelOblique, test)
summary(predictionsOblique)
#confusionMatrix(predictionsOblique,test[,5])
}
myObliqueTrain<-function(modelOblique)
{
predictions <- predict(modelOblique, train)
summary(predictions)
#confusionMatrix(predictions,train)
}
divideDataset(iris)      #calling divide datasets
modelOblique=myOblique(train =train) #training Oblique model
myObliquePredictor(modelOblique = modelOblique)       #Making prediction on testing data for final table
myObliqueTrain(modelOblique = modelOblique)           #Performance of Oblique on Training data.Code is commented,please remove comment to run it.
divideDataset<-function(data)
{
set.seed(5469)
data = iris
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myNaiveBayes<-function(train)
{
model <- naiveBayes(train[,1:4], train[,5])
return(model)
}
myNaiveBayesPredictor<-function(model)
{
predictions <- predict(model, test[,1:4])
confusionMatrix(predictions, test$Species)
}
myNaiveBayesPredictorTrain<-function(model)
{
predictions <- predict(model, train[,1:4])
confusionMatrix(predictions, train$Species)
}
divideDataset(iris)     #calling divide datasets
model=myNaiveBayes(train =train )         #training naiveBayes model
myNaiveBayesPredictor(model = model)       #Making prediction on testing data for final table
myNaiveBayesPredictorTrain(model = model)  #Performance of naiveBayes on Training data
divideDataset<-function(data)
{
set.seed(5469)
data = iris
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myNaiveBayes<-function(train)
{
model <- naiveBayes(train[,1:4], train[,5])
return(model)
}
myNaiveBayesPredictor<-function(model)
{
predictions <- predict(model, test[,1:4])
confusionMatrix(predictions, test$Species)
}
myNaiveBayesPredictorTrain<-function(model)
{
predictions <- predict(model, train[,1:4])
confusionMatrix(predictions, train$Species)
}
divideDataset(iris)     #calling divide datasets
model=myNaiveBayes(train =train )         #training naiveBayes model
myNaiveBayesPredictor(model = model)       #Making prediction on testing data for final table
myNaiveBayesPredictorTrain(model = model)  #Performance of naiveBayes on Training data
divideDataset<-function(data)
{
set.seed(5469)
data = iris
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
mykNN<-function(train,test)    #kNN classifier
{
modelkNN <- knn(train=train[,1:4],test=test[,1:4],cl=train[,5],k=3,prob = TRUE)     #k is taken as 3. Can be taken as 4, 5, 6 etc.
return(modelkNN)
}
mykNNPredictor<-function(modelkNN)
{
confusionMatrix(modelkNN, test$Species)
}
mykNNTrain<-function(train,test)
{
modelkNNTrain <- knn(train=train[,1:4],test=train[,1:4],cl=train[,5],k=3,prob = TRUE)
return(modelkNNTrain)
}
mykNNPredictorTrain<-function(modelkNNTrain)
{
confusionMatrix(modelkNNTrain, train$Species)
}
divideDataset(iris)     #calling divide datasets
modelkNN=mykNN(train =train,test =test )        #training kNN model
mykNNPredictor(modelkNN =modelkNN )             #Making prediction on testing data for final table
modelkNNTrain=mykNNTrain(train =train,test =test )        #training kNN model for train dataset.Please remove comments from code to run.
mykNNPredictorTrain(modelkNNTrain =  modelkNNTrain)       #Performance of kNN on Training data.Please remove comments from code to run
divideDataset<-function(data)
{
set.seed(5469)
data = iris
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myC45<-function(train)
{
mode <- J48(Species~., train)
return(mode)
}
myC45Predictor<-function(mode)
{
predictions <- predict(mode, test[,1:4])
confusionMatrix(predictions, test$Species)
}
myC45Train<-function(mode)
{
predictions <- predict(mode, train[,1:4])
confusionMatrix(predictions, train$Species)
}
divideDataset(iris)               #calling divide datasets
mode=myC45(train =train )         #training C45 model
myC45Predictor(mode = mode)       #Making prediction on testing data for final table
myC45Train(mode = mode)           #Performance of C45 on Training data.Code is commented,please remove comment to run it.
divideDataset<-function(data)
{
set.seed(5469)
data = iris
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myRipper<-function(train)
{
modelJRip <- JRip(Species~., train)
return(modelJRip)
}
myRipperPredictor<-function(modelJRip)
{
predictions <- predict(modelJRip, test[,1:4])
confusionMatrix(predictions, test$Species)
}
myRipperTrain<-function(modelJRip)
{
predictions <- predict(modelJRip, train[,1:4])
confusionMatrix(predictions, train$Species)
}
divideDataset(iris)               #calling divide datasets
modelJRip=myRipper(train =train )         #training Ripper model
myRipperPredictor(modelJRip = modelJRip)       #Making prediction on testing data for final table
myRipperTrain(modelJRip = modelJRip)           #Performance of Ripper on Training data.Code is commented,please remove comment to run it.
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("cluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("klaR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("ROCR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("RWeka", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
divideDataset<-function(data)
{
set.seed(5469)
data = iris
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myRipper<-function(train)
{
modelJRip <- JRip(Species~., train)
return(modelJRip)
}
myRipperPredictor<-function(modelJRip)
{
predictions <- predict(modelJRip, test[,1:4])
confusionMatrix(predictions, test$Species)
}
myRipperTrain<-function(modelJRip)
{
predictions <- predict(modelJRip, train[,1:4])
confusionMatrix(predictions, train$Species)
}
divideDataset(iris)               #calling divide datasets
modelJRip=myRipper(train =train )         #training Ripper model
myRipperPredictor(modelJRip = modelJRip)       #Making prediction on testing data for final table
myRipperTrain(modelJRip = modelJRip)           #Performance of Ripper on Training data.Code is commented,please remove comment to run it.
divideDataset<-function(data)
{
set.seed(5469)
data = iris
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
mykNN<-function(train,test)    #kNN classifier
{
modelkNN <- knn(train=train[,1:4],test=test[,1:4],cl=train[,5],k=3,prob = TRUE)     #k is taken as 3. Can be taken as 4, 5, 6 etc.
return(modelkNN)
}
mykNNPredictor<-function(modelkNN)
{
confusionMatrix(modelkNN, test$Species)
}
mykNNTrain<-function(train,test)
{
modelkNNTrain <- knn(train=train[,1:4],test=train[,1:4],cl=train[,5],k=3,prob = TRUE)
return(modelkNNTrain)
}
mykNNPredictorTrain<-function(modelkNNTrain)
{
confusionMatrix(modelkNNTrain, train$Species)
}
divideDataset(iris)     #calling divide datasets
modelkNN=mykNN(train =train,test =test )        #training kNN model
mykNNPredictor(modelkNN =modelkNN )             #Making prediction on testing data for final table
modelkNNTrain=mykNNTrain(train =train,test =test )        #training kNN model for train dataset.Please remove comments from code to run.
mykNNPredictorTrain(modelkNNTrain =  modelkNNTrain)       #Performance of kNN on Training data.Please remove comments from code to run
divideDataset<-function(data)
{
set.seed(5469)
data = iris
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myNaiveBayes<-function(train)
{
model <- naiveBayes(train[,1:4], train[,5])
return(model)
}
myNaiveBayesPredictor<-function(model)
{
predictions <- predict(model, test[,1:4])
confusionMatrix(predictions, test$Species)
}
myNaiveBayesPredictorTrain<-function(model)
{
predictions <- predict(model, train[,1:4])
confusionMatrix(predictions, train$Species)
}
divideDataset(iris)     #calling divide datasets
model=myNaiveBayes(train =train )         #training naiveBayes model
myNaiveBayesPredictor(model = model)       #Making prediction on testing data for final table
myNaiveBayesPredictorTrain(model = model)  #Performance of naiveBayes on Training data
divideDataset<-function(data)
{
set.seed(5469)
data = iris
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myRipper<-function(train)
{
modelJRip <- JRip(Species~., train)
return(modelJRip)
}
myRipperPredictor<-function(modelJRip)
{
predictions <- predict(modelJRip, test[,1:4])
confusionMatrix(predictions, test$Species)
}
myRipperTrain<-function(modelJRip)
{
predictions <- predict(modelJRip, train[,1:4])
confusionMatrix(predictions, train$Species)
}
divideDataset(iris)               #calling divide datasets
modelJRip=myRipper(train =train )         #training Ripper model
myRipperPredictor(modelJRip = modelJRip)       #Making prediction on testing data for final table
myRipperTrain(modelJRip = modelJRip)           #Performance of Ripper on Training data.Code is commented,please remove comment to run it.
divideDataset<-function(data)
{
set.seed(5469)
data = iris
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myOblique<-function(train)
{
modelOblique <- oblique.tree(Species~., data = train ,oblique.splits =
"on")
summary(modelOblique)
textplot(modelOblique)
text(modelOblique)
return(modelOblique)
}
myObliquePredictor<-function(modelOblique)
{
predictionsOblique <- predict(modelOblique, test)
summary(predictionsOblique)
#confusionMatrix(predictionsOblique,test[,5])
}
myObliqueTrain<-function(modelOblique)
{
predictions <- predict(modelOblique, train)
summary(predictions)
#confusionMatrix(predictions,train)
}
divideDataset(iris)      #calling divide datasets
modelOblique=myOblique(train =train) #training Oblique model
myObliquePredictor(modelOblique = modelOblique)       #Making prediction on testing data for final table
myObliqueTrain(modelOblique = modelOblique)           #Performance of Oblique on Training data.Code is commented,please remove comment to run it.
install.packages("oblique.tree")
library(oblique.tree)
divideDataset<-function(data)
{
set.seed(5469)
data = iris
dim(data)
indexes = sample(1:nrow(data), size=0.8*nrow(data))
# Split data into train and test
train = data[indexes,]
dim(train)
test = data[-indexes,]
dim(test)
dataset<-list(train,test)
return(dataset)
}
myOblique<-function(train)
{
modelOblique <- oblique.tree(Species~., data = train ,oblique.splits =
"on")
summary(modelOblique)
textplot(modelOblique)
text(modelOblique)
return(modelOblique)
}
myObliquePredictor<-function(modelOblique)
{
predictionsOblique <- predict(modelOblique, test)
summary(predictionsOblique)
#confusionMatrix(predictionsOblique,test[,5])
}
myObliqueTrain<-function(modelOblique)
{
predictions <- predict(modelOblique, train)
summary(predictions)
#confusionMatrix(predictions,train)
}
divideDataset(iris)      #calling divide datasets
modelOblique=myOblique(train =train) #training Oblique model
myObliquePredictor(modelOblique = modelOblique)       #Making prediction on testing data for final table
myObliqueTrain(modelOblique = modelOblique)           #Performance of Oblique on Training data.Code is commented,please remove comment to run it.
